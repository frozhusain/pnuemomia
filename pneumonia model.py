# -*- coding: utf-8 -*-
"""pnuemomia.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LR72Y4APV1s9ds3lolJtJ7g4KRWXERzd
"""

!pip install -U -q kaggle
!mkdir -p ~/.kaggle

from google.colab import files
files.upload()

!cp kaggle.json ~/.kaggle/

# Commented out IPython magic to ensure Python compatibility.
import os
from glob import glob
import matplotlib.pyplot as plt
import random
import cv2
import pandas as pd
import numpy as np
import matplotlib.gridspec as gridspec
import seaborn as sns
import zlib
import itertools
import sklearn
import itertools
import scipy
from scipy import ndimage
import skimage
from skimage.transform import resize
import csv
from tqdm import tqdm
from sklearn import model_selection
from sklearn.model_selection import train_test_split, learning_curve,KFold,cross_val_score,StratifiedKFold
from sklearn.utils import class_weight
from sklearn.metrics import confusion_matrix
import keras
from keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D, Lambda, MaxPool2D, BatchNormalization, Average, Input, GlobalAveragePooling2D
from keras.utils import np_utils
from keras.utils.np_utils import to_categorical
from keras.preprocessing.image import ImageDataGenerator
from keras import models, layers, optimizers, regularizers
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn.utils import class_weight
from keras.optimizers import SGD, RMSprop, Adam, Adagrad, Adadelta, RMSprop
from keras.models import Sequential, model_from_json
from keras.layers import Activation,Dense, Dropout, Flatten, Conv2D, MaxPool2D,MaxPooling2D,AveragePooling2D, BatchNormalization, SeparableConv2D
from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import ReduceLROnPlateau, ModelCheckpoint
from keras import backend as K
from keras.applications.vgg16 import VGG16
from keras.models import Model
from keras.applications.inception_v3 import InceptionV3
from keras.applications.resnet50 import ResNet50
from imblearn.over_sampling import RandomOverSampler
from imblearn.under_sampling import RandomUnderSampler
#from keras.applications.mobilenet import MobileNet
#from sklearn.metrics import roc_auc_score
#from sklearn.metrics import roc_curve
#from sklearn.metrics import auc
# %matplotlib inline

import warnings
warnings.filterwarnings("ignore")

kaggle datasets download -d paultimothymooney/chest-xray-pneumonia

!kaggle datasets download -d paultimothymooney/chest-xray-pneumonia

from zipfile import ZipFile
zf=ZipFile('/content/chest-xray-pneumonia.zip', 'r')
zf.extractall('training')
zf.close()

train_dir = "/content/training/chest_xray/train/"
test_dir =  "/content/training/chest_xray/test/"
import cv2
from os import listdir
import tqdm

def get_data(folder):
    X = []
    y = []
    for folderName in listdir(folder):
        if not folderName.startswith('.'):
            if folderName in ['NORMAL']:
                label = 0
            elif folderName in ['PNEUMONIA']:
                label = 1
            else:
                label = 2
            for image_filename in tqdm(listdir(folder + folderName)):
                img_file = cv2.imread(folder + folderName + '/' + image_filename)
                    # size to match pretrained vgg16 and inception networks
                img_file = skimage.transform.resize(img_file, (150, 150, 3))
                # size to match resnet50
                    #img_file = skimage.transform.resize(img_file, (200, 200, 3))
                img_arr = np.asarray(img_file)
                X.append(img_arr)
                y.append(label)
    X = np.asarray(X)
    y = np.asarray(y)
    return X,y
X_train, y_train = get_data(train_dir)
X_test, y_test= get_data(test_dir)

y_trainHot = to_categorical(y_train, num_classes = 2)
y_testHot = to_categorical(y_test, num_classes = 2)

map_characters1 = {0: 'No Pneumonia', 1: 'Yes Pneumonia'}
class_weight1 = class_weight.compute_class_weight('balanced', np.unique(y_train), y_train)

pretrained_model_vgg16 = VGG16(weights = 'imagenet', include_top=False, input_shape=(150, 150, 3))

base_model=pretrained_model_vgg16# Topless
x = base_model.output
x = Flatten()(x)
predictions = Dense(2,kernel_regularizer=regularizers.l1_l2(l1=0.01, l2=0.01), activation='softmax')(x)
model = Model(inputs=base_model.input, outputs=predictions)

model.summary()

for layer in base_model.layers:
        layer.trainable = False

from keras.callbacks import Callback, EarlyStopping, ReduceLROnPlateau, ModelCheckpoint

class MetricsCheckpoint(Callback):
    """Callback that saves metrics after each epoch"""
    def __init__(self, savepath):
        super(MetricsCheckpoint, self).__init__()
        self.savepath = savepath
        self.history = {}
    def on_epoch_end(self, epoch, logs=None):
        for k, v in logs.items():
            self.history.setdefault(k, []).append(v)
        np.save(self.savepath, self.history)

model.compile(loss='categorical_crossentropy',optimizer=Adam(lr=.00004, clipnorm=1.),metrics=['accuracy'])
callbacks_list = [keras.callbacks.EarlyStopping(monitor='val_acc', patience=3, verbose=1)]

history = model.fit(X_train,y_trainHot, epochs=6, class_weight=class_weight1, validation_data=(X_test,y_testHot), verbose=1,callbacks = [MetricsCheckpoint('logs')])

model.save_weights("drive/My Drive/abcd_n.npz")



from google.colab import drive
drive.mount('/content/drive')

import pickle

pickle.dump(model,open('model.pkl','wb'))

